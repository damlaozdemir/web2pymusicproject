(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'You_da_One'"
p3
sS'layer'
p4
S'C:\\Users\\w\xfdn 7\\Desktop\\web2py\\applications\\MusicProject\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nimport datetime\t\nsongs_data = [ {\'id\':1, "Singer\'s Name": "Rihanna", "Album": "Talk That Talk", "singerimg": "rihanna.jpg ","albumimg": "talkthattalk.jpg", "releaseyear": 2011,\n\'title\':["You da One","Where Have You Been","We Found Love", "Talk That Talk","Cockiness (Love It)","Birthday Cake","We All Want Love","Drunk on Love","Roc Me Out","Watch n\' Learn","Farewell " ]},\n{\'id\':2, "Singer\'s Name": "Beyonce", "Album": "Dangerously in Love", "singerimg": "beyonce.jpg ","albumimg": "beyonce.jpg", "releaseyear": 2003,\n\'title\':["Crazy In Love","Naughty Girl","That\'s How You Like It", "Baby Boy","Hip Hop Star","Be With You","Me, Myself and I","Yes","Signs","Speechless","The Closer I Get To You","Dangerously in Love 2","Beyonce(Interlude)","Gift From Virgo","Daddy"]},\n{\'id\':3, "Singer\'s Name": "Chris Brown", "Album": "Chris Brown", "singerimg": "chris.jpg ","albumimg": "Chris_brown.jpg", "releaseyear": 2005,\n\'title\':["Intro","Run It","Yo","Young Love","Cockiness (Love It)","Gimme That","Ya Man Ain\'t Me","Winner","Ain\'t No Way","What\'s My Name","Is This Love?","Poppin\'-Main","Just Fine","Say Goodbye","Run It!(Remix)","Thank You"]},\n{\'id\':4, "Singer\'s Name": "Jay Z", "Album": " Reasonable Doubt ", "singerimg": "Jay.jpg ","albumimg": "Reasonable_Doubt.jpg", "releaseyear": 1996,\n\'title\':["Can\'t Knock the Hustle","Politics as Usual","Brooklyn\'s Finest", "Dead Presidents II","Feelin\' It","D\'Evils","22 Two\'s","Can I Live","Ain\'t No Nigga","Friend or Foe","Coming of Age","Cashmare Thoughts","Bring It On","Regrets"]},\n{\'id\':5, "Singer\'s Name": "Cem Karaca", "Album": "Nerde Kalm\xc4\xb1\xc5\x9ft\xc4\xb1k?", "singerimg": "karaca.jpg ","albumimg": "Nerde_Kalmistik.jpg", "releaseyear": 1992,\n\'title\':["Raptiye Rap Rap","Islak Islak","Sen Duymad\xc4\xb1n","Bu Bi\xc3\xa7im", "Sen de Ba\xc5\x9f\xc4\xb1n\xc4\xb1 Al\xc4\xb1p Gitme","Niyazi K\xc3\xb6fteler","Karaba\xc4\x9f","Herkes Gibisin","N\xc3\xb6bet\xc3\xa7inin T\xc3\xbcrk\xc3\xbcs\xc3\xbc ","\xc3\x96mr\xc3\xbcm","Suskunluk"]}\n ]\n \ndef index():\n\treturn dict(msg={})\ndef about():\n\treturn dict(msg={})\ndef music():\n    rows = db(db.Songsdata.id >= 0).select()\n    return dict(rows=rows)\n\n\t\ndef song():\n\tif request.args(0):\n\t\trows=db(db.Songsdata.id ==request.args(0)).select().first()\n\t\tif rows:\n\t\t\tsongs=db(db.song.Songsdataid==rows.id).select(db.song.songname, db.song.id)\n\t\t\tcomments=db(db.comments.usersid==db.users.id).select(db.users.username,db.comments.datecomment,db.comments.comments)\n\t\treturn dict(song=rows,songs=songs,comments=comments)\n\telse:\n\t\treturn dict()\n\t\n\ndef addcomment():\n\tif request.args(0) and session.user:\n\t\tuser=db(db.users.username==session.user.username).select().first()\n\t\tdb.comments.insert(songid=request.args(0),usersid=user.id,comments=request.vars.text,datecomment=datetime.datetime.utcnow())\n\t\taddress=\'/MusicProject/default/song/\'+request.args(0)\n\t\treturn redirect(address)\n\treturn dict(msg={})\t\n\n\t\ndef addalbum():\n\treturn dict(grid=SQLFORM.grid(db.Songsdata,user_signature=False))\n\ndef addsong():\n\treturn dict(grid=SQLFORM.grid(db.song,user_signature=False))\n\t\ndef top():\n\treturn dict(msg={})\ndef bio():\n\treturn dict(msg={})\ndef photos():\n\tglobal songs_data\n\treturn dict(allsongs=songs_data)\ndef events():\n\treturn dict(msg={})\ndef NewReleases():\n\trows = db(db.Songsdata.releaseyear >= 2015 ).select()\n\treturn dict(news=rows)\n\t\t\t\ndef play():\n\tif request.args(0) and session.user:\n\t\trows = db(db.song.id==request.args(0)).select()\n\treturn dict(rows = rows)\n\n\ndef user():\n\t\n\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\t\ndef uploads():  \n    return response.download(request, db)\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(play)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\applications\\MusicProject\\controllers/default.py", line 118, in <module>\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\applications\\MusicProject\\controllers/default.py", line 73, in play\n    rows = db(db.song.id==request.args(0)).select()\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2002, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 122, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1273, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1160, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 945, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 839, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 955, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Users\\w\xfdn 7\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1425, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'You_da_One\'\n'
p11
s.